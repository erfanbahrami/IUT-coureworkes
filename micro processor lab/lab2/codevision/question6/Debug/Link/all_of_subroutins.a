;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;#define portA 1
;#define portB 2
;#define portC 3
;#define portD 4
;void Subroutine_1(int number , char selectPort , int time)
; 0001 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000B     int counter = 0;
; 0001 000C     delay_ms(500);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	number -> Y+5
;	selectPort -> Y+4
;	time -> Y+2
;	counter -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 000D     switch (selectPort)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 000E     {
; 0001 000F         case(portA):
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0010         DDRA = 0xFF;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0011         for (counter = 0; counter < number; counter++)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0012         {
; 0001 0013             PORTA = 0xFF;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0014             delay_ms(time);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0015             PORTA = 0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0016             delay_ms(time);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0017         }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0018         break;
;PCODE: $00000032 VOL: 0
; 0001 0019 
; 0001 001A         case(portB):
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 001B         DDRB = 0xFF;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 001C         for (counter = 0; counter < number; counter++)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 001D         {
; 0001 001E             PORTB = 0xFF;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 001F             delay_ms(time);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0020             PORTB = 0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0021             delay_ms(time);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0022         }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0023         break;
;PCODE: $0000004E VOL: 0
; 0001 0024 
; 0001 0025         case(portC):
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0026         DDRC = 0xFF;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0027         for (counter = 0; counter < number; counter++)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 0028         {
; 0001 0029             PORTC = 0xFF;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 002A             delay_ms(time);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 002B             PORTC = 0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 002C             delay_ms(time);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 002D         }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 002E         break;
;PCODE: $0000006A VOL: 0
; 0001 002F 
; 0001 0030         case(portD):
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0031         DDRD = 0xFF;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0032         for (counter = 0; counter < number; counter++)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0033         {
; 0001 0034             PORTD = 0xFF;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0035             delay_ms(time);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0036             PORTD = 0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0037             delay_ms(time);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0038         }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0039         break;
;PCODE: $00000086 VOL: 0
; 0001 003A 
; 0001 003B         default:
;PCODE: $00000087 VOL: 0
; 0001 003C         printf("Out of range");
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 003D         break;
;PCODE: $0000008F VOL: 0
; 0001 003E     }
;PCODE: $00000090 VOL: 0
; 0001 003F }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;
;void Subroutine_2(int location , int time)
; 0001 0042 {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0043     int counter = location-1;
; 0001 0044     int d = (time / ( 8 - location ));
; 0001 0045     DDRB = 0xFF;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;	location -> Y+6
;	time -> Y+4
;	counter -> R16,R17
;	d -> R18,R19
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0046     while ( counter < 8 )
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0047     {
; 0001 0048         PORTB |= 1 << counter;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 0049         delay_ms(d);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 004A         PORTB &= ~(1 << counter);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 004B         counter++;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 004C     }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 004D }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;
;void Subroutine_3(char select_input , char select_output)
; 0001 0050 {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0051     int value;
; 0001 0052     switch(select_input)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;	select_input -> Y+3
;	select_output -> Y+2
;	value -> R16,R17
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0053     {
; 0001 0054         case(portA):
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 0055             DDRA = 0x00; value = PINA; break;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 0056 
; 0001 0057         case(portB):
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 0058             DDRB = 0x00; value = PINB; break;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 0059 
; 0001 005A         case(portC):
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 005B             DDRC = 0x00; value = PINC; break;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 005C 
; 0001 005D         case(portD):
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 005E             DDRD = 0x00; value = PIND; break;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 005F 
; 0001 0060         default:
;PCODE: $000000EE VOL: 0
; 0001 0061             printf("out of range");
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0001 0062             break;
;PCODE: $000000F6 VOL: 0
; 0001 0063     }
;PCODE: $000000F7 VOL: 0
; 0001 0064 
; 0001 0065     switch(select_output)
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0001 0066     {
; 0001 0067         case(portA):
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 0068             DDRA = 0xFF; PORTA = value; break;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0001 0069 
; 0001 006A         case(portB):
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 006B             DDRB = 0xFF; PORTB = value; break;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 006C 
; 0001 006D         case(portC):
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 006E             DDRC = 0xFF; PORTC = value; break;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0001 006F 
; 0001 0070         case(portD):
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0001 0071             DDRD = 0xFF; PORTD = value; break;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0072 
; 0001 0073         default:
;PCODE: $00000119 VOL: 0
; 0001 0074             printf("out of range");
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 0075             break;
;PCODE: $00000121 VOL: 0
; 0001 0076     }
;PCODE: $00000122 VOL: 0
; 0001 0077 }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;
;void Subroutine_4(char incDec , char syncAsinc)
; 0001 007A {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 007B     int counter = 0 , which;
; 0001 007C     char array[] = {    0b00111111,      // 9  7_segment
; 0001 007D                         0b00000110,      // 8  7_segment
; 0001 007E                         0b01011011,      // 7  7_segment
; 0001 007F                         0b01001111,      // 6  7_segment
; 0001 0080                         0b01100110,      // 5  7_segment
; 0001 0081                         0b01101101,      // 4  7_segment
; 0001 0082                         0b01111101,      // 3  7_segment
; 0001 0083                         0b00000111,      // 2  7_segment
; 0001 0084                         0b01111111,      // 1  7_segment
; 0001 0085                         0b01101111       // 0  7_segment
; 0001 0086                         };
; 0001 0087     DDRC = 0xFF;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;	incDec -> Y+15
;	syncAsinc -> Y+14
;	counter -> R16,R17
;	which -> R18,R19
;	array -> Y+4
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 0088     DDRD = 0xFF;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 0089     switch(syncAsinc)
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 008A     {
; 0001 008B 		case(0):            // 0 for Synchronous
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0001 008C             PORTD.0 = 0; PORTD.1 = 0; PORTD.2 = 0; PORTD.3 = 0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 008D 			switch(incDec)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 008E             {
; 0001 008F 				case(0):    // 0 for increasing
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 0090 				    for (counter = 0; counter < 10; counter++)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 0091                     {
; 0001 0092 						PORTC = array[counter];
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0001 0093 						delay_ms(1000);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0001 0094 					}
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 0095 					break;
;PCODE: $0000015D VOL: 0
; 0001 0096 
; 0001 0097 				case(1):    // 1 for decreasing
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0001 0098 					for (counter = 9; counter >= 0; counter--)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 0099                     {
; 0001 009A 						PORTC = array[counter];
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0001 009B 						delay_ms(1000);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0001 009C 					}
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 009D 					break;
;PCODE: $00000174 VOL: 0
; 0001 009E 
; 0001 009F 				default:
;PCODE: $00000175 VOL: 0
; 0001 00A0                     printf("Error");
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0001 00A1 					break;
;PCODE: $0000017D VOL: 0
; 0001 00A2 			}
;PCODE: $0000017E VOL: 0
; 0001 00A3 			break;
;PCODE: $0000017F VOL: 0
; 0001 00A4 
; 0001 00A5         case(1):	        // 1 for Asynchronous
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 00A6 			switch(incDec)
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0001 00A7             {
; 0001 00A8 				PORTD.0 = 1; PORTD.1 = 1; PORTD.2 = 1; PORTD.3 = 1;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0001 00A9                 which = 0;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 00AA 				case(0):    // 0 for increasing
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0001 00AB 					for (counter = 0; counter < 10; counter++)
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 00AC                     {
; 0001 00AD                         if (which == 4)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0001 00AE 							which = 0;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0001 00AF 
; 0001 00B0 						PORTD &= ~(1 << which);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0001 00B1 						PORTC = array[counter];
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0001 00B2 						delay_ms(1000);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 00B3 						PORTD |= 1 << which;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0001 00B4 
; 0001 00B5 						which++;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0001 00B6 					}
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0001 00B7 					break;
;PCODE: $000001BC VOL: 0
; 0001 00B8 
; 0001 00B9 				case(1):     // 1 for decreasing
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 00BA 					for (counter = 9; counter >= 0; counter--)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0001 00BB                     {
; 0001 00BC                         if (which == 4)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0001 00BD 							which = 0;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0001 00BE 
; 0001 00BF 						PORTD &= ~(1 << which);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0001 00C0 						PORTC = array[counter];
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0001 00C1 						delay_ms(1000);
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0001 00C2 						PORTD |= 1 << which;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0001 00C3 
; 0001 00C4 						which++;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0001 00C5 					}
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 00C6 					break;
;PCODE: $000001EA VOL: 0
; 0001 00C7 
; 0001 00C8 				default:
;PCODE: $000001EB VOL: 0
; 0001 00C9                     printf("Error");
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0001 00CA 					break;
;PCODE: $000001F3 VOL: 0
; 0001 00CB 			}
;PCODE: $000001F4 VOL: 0
; 0001 00CC 			break;
;PCODE: $000001F5 VOL: 0
; 0001 00CD 	}
;PCODE: $000001F6 VOL: 0
; 0001 00CE }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;
;void Subroutine_5(float deghat)
; 0001 00D1 {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0001 00D2       char arr[] = {    0b00111111,      // 9  7_segment
; 0001 00D3                         0b00000110,      // 8  7_segment
; 0001 00D4                         0b01011011,      // 7  7_segment
; 0001 00D5                         0b01001111,      // 6  7_segment
; 0001 00D6                         0b01100110,      // 5  7_segment
; 0001 00D7                         0b01101101,      // 4  7_segment
; 0001 00D8                         0b01111101,      // 3  7_segment
; 0001 00D9                         0b00000111,      // 2  7_segment
; 0001 00DA                         0b01111111,      // 1  7_segment
; 0001 00DB                         0b01101111       // 0  7_segment
; 0001 00DC                         };
; 0001 00DD       char arr2[] = {   0b10111111,      // 9  7_segment with dip points
; 0001 00DE                         0b10000110,      // 8  7_segment with dip points
; 0001 00DF                         0b11011011,      // 7  7_segment with dip points
; 0001 00E0                         0b11001111,      // 6  7_segment with dip points
; 0001 00E1                         0b11100110,      // 5  7_segment with dip points
; 0001 00E2                         0b11101101,      // 4  7_segment with dip points
; 0001 00E3                         0b11111101,      // 3  7_segment with dip points
; 0001 00E4                         0b10000111,      // 2  7_segment with dip points
; 0001 00E5                         0b11111111,      // 1  7_segment with dip points
; 0001 00E6                         0b11101111       // 0  7_segment with dip points
; 0001 00E7                         };
; 0001 00E8       int number = 0 , counter = 0 , deghat_10 = deghat*10;
; 0001 00E9       unsigned int a0 , a1, a2, a3;
; 0001 00EA       unsigned int b0 , b1 , b2 , b3;
; 0001 00EB       number = PINA;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;	deghat -> Y+42
;	arr -> Y+32
;	arr2 -> Y+22
;	number -> R16,R17
;	counter -> R18,R19
;	deghat_10 -> R20,R21
;	a0 -> Y+20
;	a1 -> Y+18
;	a2 -> Y+16
;	a3 -> Y+14
;	b0 -> Y+12
;	b1 -> Y+10
;	b2 -> Y+8
;	b3 -> Y+6
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0001 00EC       number = number * 10;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0001 00ED       DDRA = 0x00000000;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0001 00EE       DDRD = 0b00001111;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0001 00EF 
; 0001 00F0       while (number >= 0)
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0001 00F1       {
; 0001 00F2             a0 = number % 10;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0001 00F3             b0 = number / 10;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0001 00F4 
; 0001 00F5             a1 = b0 % 10;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0001 00F6             b1 = b0 / 10;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0001 00F7 
; 0001 00F8             a2 = b1 % 10;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0001 00F9             b2 = b1 / 10;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0001 00FA 
; 0001 00FB             a3 = b2 % 10;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0001 00FC             b3 = b2 / 10;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0001 00FD 
; 0001 00FE             PORTC = arr[a3];
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0001 00FF             PORTD = 0b00001110; delay_ms(5);  PORTD = 0b00001111;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0001 0100 
; 0001 0101             PORTC = arr[a2];
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0001 0102             PORTD = 0b00001101; delay_ms(5);  PORTD = 0b00001111;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0001 0103 
; 0001 0104             PORTC = arr2[a1];
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0001 0105             PORTD = 0b00001011; delay_ms(5);  PORTD = 0b00001111;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0001 0106 
; 0001 0107             PORTC = arr[a0];
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0001 0108             PORTD = 0b00000111; delay_ms(5);  PORTD = 0b00001111;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0001 0109 
; 0001 010A             counter = counter + 1;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0001 010B             if (counter == 20)
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0001 010C             {
; 0001 010D                   number  = number - deghat_10;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0001 010E                   counter = 0;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0001 010F             }
; 0001 0110       }
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0001 0111 }
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
