;/*
; * 4.c
; *
; * Created: 2020-10-11 12:54:36 PM
; * Author: KPS
; */
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;void Subroutine_4(char incDec , char syncAsinc)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E     int counter = 0 , which;
; 0000 000F     char array[] = {    0b00111111,      // 9  7_segment
; 0000 0010                         0b00000110,      // 8  7_segment
; 0000 0011                         0b01011011,      // 7  7_segment
; 0000 0012                         0b01001111,      // 6  7_segment
; 0000 0013                         0b01100110,      // 5  7_segment
; 0000 0014                         0b01101101,      // 4  7_segment
; 0000 0015                         0b01111101,      // 3  7_segment
; 0000 0016                         0b00000111,      // 2  7_segment
; 0000 0017                         0b01111111,      // 1  7_segment
; 0000 0018                         0b01101111       // 0  7_segment
; 0000 0019                         };
; 0000 001A     DDRC = 0xFF;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	incDec -> Y+15
;	syncAsinc -> Y+14
;	counter -> R16,R17
;	which -> R18,R19
;	array -> Y+4
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001B     DDRD = 0xFF;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001C     switch(syncAsinc)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001D     {
; 0000 001E 		case(0):            // 0 for Synchronous
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001F             PORTD.0 = 0; PORTD.1 = 0; PORTD.2 = 0; PORTD.3 = 0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0020 			switch(incDec)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0021             {
; 0000 0022 				case(0):    // 0 for increasing
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0023 				    for (counter = 0; counter < 10; counter++)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0024                     {
; 0000 0025 						PORTC = array[counter];
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0026 						delay_ms(1000);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0027 					}
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0028 					break;
;PCODE: $00000040 VOL: 0
; 0000 0029 
; 0000 002A 				case(1):    // 1 for decreasing
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002B 					for (counter = 9; counter >= 0; counter--)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 002C                     {
; 0000 002D 						PORTC = array[counter];
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 002E 						delay_ms(1000);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002F 					}
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0030 					break;
;PCODE: $00000057 VOL: 0
; 0000 0031 
; 0000 0032 				default:
;PCODE: $00000058 VOL: 0
; 0000 0033                     printf("Error");
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0034 					break;
;PCODE: $00000060 VOL: 0
; 0000 0035 			}
;PCODE: $00000061 VOL: 0
; 0000 0036 			break;
;PCODE: $00000062 VOL: 0
; 0000 0037 
; 0000 0038         case(1):	        // 1 for Asynchronous
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0039 			switch(incDec)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003A             {
; 0000 003B 				PORTD.0 = 1; PORTD.1 = 1; PORTD.2 = 1; PORTD.3 = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003C                 which = 0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003D 				case(0):    // 0 for increasing
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 003E 					for (counter = 0; counter < 10; counter++)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 003F                     {
; 0000 0040                         if (which == 4)
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0041 							which = 0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0042 
; 0000 0043 						PORTD &= ~(1 << which);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0044 						PORTC = array[counter];
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0045 						delay_ms(1000);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0046 						PORTD |= 1 << which;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0047 
; 0000 0048 						which++;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0049 					}
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 004A 					break;
;PCODE: $0000009F VOL: 0
; 0000 004B 
; 0000 004C 				case(1):     // 1 for decreasing
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 004D 					for (counter = 9; counter >= 0; counter--)
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 004E                     {
; 0000 004F                         if (which == 4)
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0050 							which = 0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0051 
; 0000 0052 						PORTD &= ~(1 << which);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0053 						PORTC = array[counter];
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0054 						delay_ms(1000);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0055 						PORTD |= 1 << which;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0056 
; 0000 0057 						which++;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0058 					}
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0059 					break;
;PCODE: $000000CD VOL: 0
; 0000 005A 
; 0000 005B 				default:
;PCODE: $000000CE VOL: 0
; 0000 005C                     printf("Error");
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 005D 					break;
;PCODE: $000000D6 VOL: 0
; 0000 005E 			}
;PCODE: $000000D7 VOL: 0
; 0000 005F 			break;
;PCODE: $000000D8 VOL: 0
; 0000 0060 	}
;PCODE: $000000D9 VOL: 0
; 0000 0061 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;void main(void)
; 0000 0063 {
;PCODE: $000000DE VOL: 0
; 0000 0064 while (1)
;PCODE: $000000DF VOL: 0
; 0000 0065     {
; 0000 0066     // Please write your application code here
; 0000 0067         Subroutine_4(1 , 0);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0068     }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0069 }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
