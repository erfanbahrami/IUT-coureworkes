;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2020-10-19
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;
;// ba komak az site https://www.electronicwings.com/avr-atmega/4x4-keypad-interfacing-with-atmega1632
;#define KEY_PRT 	PORTB
;#define KEY_DDR		DDRB
;#define KEY_PIN		PINB
;
;unsigned char Subroutine_3(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023         unsigned char col, row , temp;
; 0000 0024         unsigned char array[4][4] = {	{'0','1','2','3'},
; 0000 0025 				                        {'4','5','6','7'},
; 0000 0026 				                        {'8','9','A','B'},
; 0000 0027 				                        {'C','D','E','F'}};
; 0000 0028         KEY_DDR = 0xf0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;	col -> R17
;	row -> R16
;	temp -> R19
;	array -> Y+4
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0029         KEY_PRT = 0xff;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002A         /*  check for columns */
; 0000 002B         do {
;PCODE: $00000019 VOL: 0
; 0000 002C             KEY_PRT = 0xff;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002D             col= (KEY_PIN & 0x0f);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002E         } while (col != 0x00);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002F 
; 0000 0030         do {
;PCODE: $00000024 VOL: 0
; 0000 0031             KEY_PRT = 0xff;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0032             col= (KEY_PIN & 0x0f);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0033         } while (col == 0x00);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0034 
; 0000 0035         do {
;PCODE: $0000002F VOL: 0
; 0000 0036             do {
;PCODE: $00000030 VOL: 0
; 0000 0037                   delay_ms(20);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0038                   col = (KEY_PIN & 0x0f);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0039             } while (col == 0x00);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003A 
; 0000 003B             delay_ms(20);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003C             col = (KEY_PIN & 0x0f);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003D 
; 0000 003E         } while (col == 0x00);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003F 
; 0000 0040         /* now check for rows */
; 0000 0041         while(1)
;PCODE: $00000047 VOL: 0
; 0000 0042         {
; 0000 0043                 KEY_PRT = 0x1f;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0044                 col = (KEY_PIN & 0x0f);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0045                 if (col != 0x00)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0046                 {
; 0000 0047                     row=0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0048                     break;
;PCODE: $00000051 VOL: 0
; 0000 0049                 }
; 0000 004A 
; 0000 004B                 KEY_PRT = 0x2f;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004C                 col = (KEY_PIN & 0x0f);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004D                 if (col != 0x00)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004E                 {
; 0000 004F                     row=1;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0050                     break;
;PCODE: $0000005C VOL: 0
; 0000 0051                 }
; 0000 0052 
; 0000 0053                 KEY_PRT = 0x4f;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0054                 col = (KEY_PIN & 0x0f);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0055                 if (col != 0x00)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0056                 {
; 0000 0057                     row=2;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0058                     break;
;PCODE: $00000067 VOL: 0
; 0000 0059                 }
; 0000 005A 
; 0000 005B                 KEY_PRT = 0x8f;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005C                 col = (KEY_PIN & 0x0f);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005D                 if (col != 0x00)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005E                 {
; 0000 005F                     row=3;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0060                     break;
;PCODE: $00000072 VOL: 0
; 0000 0061                 }
; 0000 0062       }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0063 
; 0000 0064         if (col == 0x01)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0065                 temp = (array[row][0]);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0066         else if (col == 0x02)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0067                 temp =(array[row][1]);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0068         else if (col == 0x04)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0069                 temp =(array[row][2]);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 006A         else
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006B                 temp =(array[row][3]);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 006C         return temp ;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006D }
;PCODE: $000000A7 VOL: 0
;
;
;void main(void)
; 0000 0071 {
;PCODE: $000000A8 VOL: 0
; 0000 0072 // Input/Output Ports initialization
; 0000 0073     // Port A initialization
; 0000 0074     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0075     DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0076     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0077     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0078 
; 0000 0079     // Port B initialization
; 0000 007A     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007B     DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 007C     // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007D     PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007E 
; 0000 007F     // Port C initialization
; 0000 0080     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0081     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0082     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0083     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0084 
; 0000 0085     // Port D initialization
; 0000 0086     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0087     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0088     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0089     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 008A 
; 0000 008B 
; 0000 008C 
; 0000 008D // Alphanumeric LCD initialization
; 0000 008E // Connections are specified in the
; 0000 008F // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0090 // RS - PORTA Bit 0
; 0000 0091 // RD - PORTA Bit 1
; 0000 0092 // EN - PORTA Bit 2
; 0000 0093 // D4 - PORTA Bit 4
; 0000 0094 // D5 - PORTA Bit 5
; 0000 0095 // D6 - PORTA Bit 6
; 0000 0096 // D7 - PORTA Bit 7
; 0000 0097 // Characters/line: 16
; 0000 0098 lcd_init(16);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0099 
; 0000 009A while (1)
;PCODE: $000000BB VOL: 0
; 0000 009B       {
; 0000 009C         lcd_putchar(Subroutine_3());
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 009D 
; 0000 009E       }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 009F }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
