/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 2020-10-19
Author  : 
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega16.h>
#include <delay.h>
#include <alcd.h>

#define KEY_PRT 	PORTB
#define KEY_DDR		DDRB
#define KEY_PIN		PINB

unsigned char Subroutine_3(void)
{
        unsigned char col, row , temp;
        unsigned char array[4][4] = {	{'0','1','2','3'},
				                        {'4','5','6','7'},
				                        {'8','9','A','B'},
				                        {'C','D','E','F'}};   
        KEY_DDR = 0xf0;
        KEY_PRT = 0xff;
         
        do {
            KEY_PRT = 0xff;
            col= (KEY_PIN & 0x0f);
        } while (col != 0x00);
     
        do {
            KEY_PRT = 0xff;
            col= (KEY_PIN & 0x0f);
        } while (col == 0x00); 
            
        do {
            do {
                  delay_ms(20);
                  col = (KEY_PIN & 0x0f);
            } while (col == 0x00);
            
            delay_ms(20);
            col = (KEY_PIN & 0x0f);
            
        } while (col == 0x00);
      
        while(1) 
        {
                KEY_PRT = 0x1f;
                col = (KEY_PIN & 0x0f);
            
                if (col != 0x00) 
                {
                    row=0;
                    break;
                }
            
                KEY_PRT = 0x2f;
                col = (KEY_PIN & 0x0f);
            
                if (col != 0x00) 
                {
                    row=1;
                    break;
                }
            
                KEY_PRT = 0x4f;
                col = (KEY_PIN & 0x0f);
            
                if (col != 0x00) 
                {
                    row=2; 
                    break;
                }
            
                KEY_PRT = 0x8f;
                col = (KEY_PIN & 0x0f);
      
                if (col != 0x00) 
                {
                    row=3;
                    break;
                }
      }
      
        if (col == 0x01)
                temp = (array[row][0]);
        else if (col == 0x02)
                temp =(array[row][1]);
        else if (col == 0x04)
                temp =(array[row][2]);
        else
                temp =(array[row][3]);  
        return temp ;
}


                               



void main(void)
{
// Input/Output Ports initialization
    // Port A initialization
    // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
    DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
    // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
    PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

    // Port B initialization
    // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
    DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
    // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=T Bit2=T Bit1=T Bit0=T 
    PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

    // Port C initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
    DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
    PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

    // Port D initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
    DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);



// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTA Bit 0
// RD - PORTA Bit 1
// EN - PORTA Bit 2
// D4 - PORTA Bit 4
// D5 - PORTA Bit 5
// D6 - PORTA Bit 6
// D7 - PORTA Bit 7
// Characters/line: 16
lcd_init(16);

while (1)
      {
        lcd_putchar(Subroutine_3());
       
      }
}
