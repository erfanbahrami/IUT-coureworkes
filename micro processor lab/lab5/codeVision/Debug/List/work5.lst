
AVRASM ver. 2.1.30  C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm Thu Oct 29 10:51:17 2020

C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _b=R5
                 	.DEF _f=R4
                 	.DEF _shift=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 008b 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0090 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1126): warning: .cseg .db misalignment - padding zero byte
00002b 0001      	.DB  0x0,0x0,0x1
                 
                 _0x0:
00002c 3d77
00002d 2031
00002e 7072
00002f 0a73      	.DB  0x77,0x3D,0x31,0x20,0x72,0x70,0x73,0xA
000030 6c43
000031 636f
000032 776b
000033 7369      	.DB  0x43,0x6C,0x6F,0x63,0x6B,0x77,0x69,0x73
000034 0065
000035 3d77
000036 2030
000037 7072      	.DB  0x65,0x0,0x77,0x3D,0x30,0x20,0x72,0x70
000038 0073
000039 3d77
00003a 2031
00003b 7072      	.DB  0x73,0x0,0x77,0x3D,0x31,0x20,0x72,0x70
00003c 0a73
00003d 6f43
00003e 6e75
00003f 6574      	.DB  0x73,0xA,0x43,0x6F,0x75,0x6E,0x74,0x65
000040 6372
000041 6f6c
000042 6b63
000043 6977      	.DB  0x72,0x63,0x6C,0x6F,0x63,0x6B,0x77,0x69
000044 6573
000045 0020      	.DB  0x73,0x65,0x20,0x0
                 _0x40003:
C:\Users\KPS\Desktop\Learning\IUT\99-1\AZ digital\Assignments\Assignment5.MohammadSadraRimaz.9628853\code vision\Debug\List\work5.asm(1137): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x2000003:
000047 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000048 0003      	.DW  0x03
000049 0005      	.DW  0x05
00004a 0054      	.DW  __REG_VARS*2
                 
00004b 0012      	.DW  0x12
00004c 0160      	.DW  _0x7
00004d 0058      	.DW  _0x0*2
                 
00004e 0008      	.DW  0x08
00004f 0172      	.DW  _0x7+18
000050 006a      	.DW  _0x0*2+18
                 
000051 001a      	.DW  0x1A
000052 017a      	.DW  _0x7+26
000053 0072      	.DW  _0x0*2+26
                 
000054 0008      	.DW  0x08
000055 0194      	.DW  _0x7+52
000056 006a      	.DW  _0x0*2+18
                 
000057 0001      	.DW  0x01
000058 019c      	.DW  _flag
000059 008c      	.DW  _0x40003*2
                 
00005a 0002      	.DW  0x02
00005b 019d      	.DW  __base_y_G100
00005c 008e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bffb      	OUT  GICR,R31
000063 bfeb      	OUT  GICR,R30
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 00a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : Assignment 5
                 ;Version :
                 ;Date    : 2020-10-28
                 ;Author  : Mohammad Sadra Rimaz
                 ;Company :
                 ;Comments:
                 ;*******************************************************/
                 ;
                 ;#include <headerFile.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;char b=0;
                 ;char f;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00008b 940e 01af 	CALL SUBOPT_0x0
                 ; 0000 0011     changeDutyCycle();
00008d 940e 00fb 	CALL _changeDutyCycle
                 ; 0000 0012 }
00008f c00b      	RJMP _0x9
                 ; .FEND
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0016 {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000090 940e 01af 	CALL SUBOPT_0x0
                 ; 0000 0017     TCNT2=0x3D;
000092 e3ed      	LDI  R30,LOW(61)
000093 bde4      	OUT  0x24,R30
                 ; 0000 0018     b = b + 1;
000094 9453      	INC  R5
                 ; 0000 0019     if (b==4)
000095 e0e4      	LDI  R30,LOW(4)
000096 15e5      	CP   R30,R5
000097 f419      	BRNE _0x3
                 ; 0000 001A     {
                 ; 0000 001B         stepperMotorSignal();
000098 940e 010e 	CALL _stepperMotorSignal
                 ; 0000 001C         b = 0;
00009a 2455      	CLR  R5
                 ; 0000 001D     }
                 ; 0000 001E 
                 ; 0000 001F }
                 _0x3:
                 _0x9:
00009b 91e9      	LD   R30,Y+
00009c bfef      	OUT  SREG,R30
00009d 91f9      	LD   R31,Y+
00009e 91e9      	LD   R30,Y+
00009f 91b9      	LD   R27,Y+
0000a0 91a9      	LD   R26,Y+
0000a1 9199      	LD   R25,Y+
0000a2 9189      	LD   R24,Y+
0000a3 9179      	LD   R23,Y+
0000a4 9169      	LD   R22,Y+
0000a5 90f9      	LD   R15,Y+
0000a6 9019      	LD   R1,Y+
0000a7 9009      	LD   R0,Y+
0000a8 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0023 
                 ; 0000 0024     init();
0000a9 d04b      	RCALL _init
                 ; 0000 0025 
                 ; 0000 0026     #asm("sei")
0000aa 9478      	sei
                 ; 0000 0027 
                 ; 0000 0028     b = 0x01;
0000ab e0e1      	LDI  R30,LOW(1)
0000ac 2e5e      	MOV  R5,R30
                 ; 0000 0029     f = 1;
0000ad 2e4e      	MOV  R4,R30
                 ; 0000 002A     while (1)
                 _0x4:
                 ; 0000 002B     {
                 ; 0000 002C         flag = 1;
0000ae e0e1      	LDI  R30,LOW(1)
0000af 940e 01bd 	CALL SUBOPT_0x1
                 ; 0000 002D         lcd_clear();
                 ; 0000 002E         lcd_puts("w=1 rps\nClockwise");
                +
0000b1 e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000b2 e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000b3 940e 01c0 	CALL SUBOPT_0x2
                 ; 0000 002F         delay_ms(3000);
                 ; 0000 0030         flag = 0;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 940e 01bd 	CALL SUBOPT_0x1
                 ; 0000 0031         lcd_clear();
                 ; 0000 0032         lcd_puts("w=0 rps");
                +
0000b8 e7a2     +LDI R26 , LOW ( _0x7 + ( 18 ) )
0000b9 e0b1     +LDI R27 , HIGH ( _0x7 + ( 18 ) )
                 	__POINTW2MN _0x7,18
0000ba 940e 01c0 	CALL SUBOPT_0x2
                 ; 0000 0033         delay_ms(3000);
                 ; 0000 0034         flag = 2;
0000bc e0e2      	LDI  R30,LOW(2)
0000bd 940e 01bd 	CALL SUBOPT_0x1
                 ; 0000 0035         lcd_clear();
                 ; 0000 0036         lcd_puts("w=1 rps\nCounterclockwise ");
                +
0000bf e7aa     +LDI R26 , LOW ( _0x7 + ( 26 ) )
0000c0 e0b1     +LDI R27 , HIGH ( _0x7 + ( 26 ) )
                 	__POINTW2MN _0x7,26
0000c1 940e 01c0 	CALL SUBOPT_0x2
                 ; 0000 0037         delay_ms(3000);
                 ; 0000 0038         flag = 0;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 940e 01bd 	CALL SUBOPT_0x1
                 ; 0000 0039         lcd_clear();
                 ; 0000 003A         lcd_puts("w=0 rps");
                +
0000c6 e9a4     +LDI R26 , LOW ( _0x7 + ( 52 ) )
0000c7 e0b1     +LDI R27 , HIGH ( _0x7 + ( 52 ) )
                 	__POINTW2MN _0x7,52
0000c8 940e 01c0 	CALL SUBOPT_0x2
                 ; 0000 003B         delay_ms(3000);
                 ; 0000 003C     }
0000ca cfe3      	RJMP _0x4
                 ; 0000 003D }
                 _0x8:
0000cb cfff      	RJMP _0x8
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000160           	.BYTE 0x3C
                 ;#include <headerFile.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void ioInit(void)
                 ; 0001 0004 {
                 
                 	.CSEG
                 _ioInit:
                 ; .FSTART _ioInit
                 ; 0001 0005     DDRA = 0x00;
0000cc e0e0      	LDI  R30,LOW(0)
0000cd bbea      	OUT  0x1A,R30
                 ; 0001 0006     DDRB = 0xFF;
0000ce efef      	LDI  R30,LOW(255)
0000cf bbe7      	OUT  0x17,R30
                 ; 0001 0007     DDRC = 0xFF;
0000d0 bbe4      	OUT  0x14,R30
                 ; 0001 0008     DDRD = 0x00;
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 bbe1      	OUT  0x11,R30
                 ; 0001 0009 
                 ; 0001 000A     PORTB=0X00;
0000d3 bbe8      	OUT  0x18,R30
                 ; 0001 000B }
0000d4 9508      	RET
                 ; .FEND
                 ;
                 ;void timer0Init(void)
                 ; 0001 000E {
                 _timer0Init:
                 ; .FSTART _timer0Init
                 ; 0001 000F     // Timer/Counter 0 initialization
                 ; 0001 0010     // Clock source: System Clock
                 ; 0001 0011     // Clock value: 7.813 kHz
                 ; 0001 0012     // Mode: Phase correct PWM top=0xFF
                 ; 0001 0013     // OC0 output: Non-Inverted PWM
                 ; 0001 0014     // Timer Period: 65.28 ms
                 ; 0001 0015     // Output Pulse(s):
                 ; 0001 0016     // OC0 Period: 65.28 ms Width: 32.768 ms
                 ; 0001 0017     TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000d5 e6e5      	LDI  R30,LOW(101)
0000d6 bfe3      	OUT  0x33,R30
                 ; 0001 0018     TCNT0=0x00;
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bfe2      	OUT  0x32,R30
                 ; 0001 0019     OCR0=0x80;
0000d9 e8e0      	LDI  R30,LOW(128)
0000da bfec      	OUT  0x3C,R30
                 ; 0001 001A }
0000db 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void timer2Init(void)
                 ; 0001 001E {
                 _timer2Init:
                 ; .FSTART _timer2Init
                 ; 0001 001F     // Timer/Counter 2 initialization
                 ; 0001 0020     // Clock source: System Clock
                 ; 0001 0021     // Clock value: 7.813 kHz
                 ; 0001 0022     // Mode: Normal top=0xFF
                 ; 0001 0023     // OC2 output: Disconnected
                 ; 0001 0024     // Timer Period: 24.96 ms
                 ; 0001 0025     ASSR=0<<AS2;
0000dc e0e0      	LDI  R30,LOW(0)
0000dd bde2      	OUT  0x22,R30
                 ; 0001 0026     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0000de e0e7      	LDI  R30,LOW(7)
0000df bde5      	OUT  0x25,R30
                 ; 0001 0027     TCNT2=0x3D;
0000e0 e3ed      	LDI  R30,LOW(61)
0000e1 bde4      	OUT  0x24,R30
                 ; 0001 0028     OCR2=0x00;
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 bde3      	OUT  0x23,R30
                 ; 0001 0029 
                 ; 0001 002A }
0000e4 9508      	RET
                 ; .FEND
                 ;
                 ;void interruptsInit(void)
                 ; 0001 002D {
                 _interruptsInit:
                 ; .FSTART _interruptsInit
                 ; 0001 002E     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 002F     TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000e5 e4e0      	LDI  R30,LOW(64)
0000e6 bfe9      	OUT  0x39,R30
                 ; 0001 0030 
                 ; 0001 0031     // External Interrupt(s) initialization
                 ; 0001 0032     // INT0: On
                 ; 0001 0033     // INT0 Mode: Falling Edge
                 ; 0001 0034     // INT1: Off
                 ; 0001 0035     // INT2: Off
                 ; 0001 0036     GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000e7 b7eb      	IN   R30,0x3B
0000e8 64e0      	ORI  R30,0x40
0000e9 bfeb      	OUT  0x3B,R30
                 ; 0001 0037     MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000ea e0e2      	LDI  R30,LOW(2)
0000eb bfe5      	OUT  0x35,R30
                 ; 0001 0038     MCUCSR=(0<<ISC2);
0000ec e0e0      	LDI  R30,LOW(0)
0000ed bfe4      	OUT  0x34,R30
                 ; 0001 0039     GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000ee e4e0      	LDI  R30,LOW(64)
0000ef bfea      	OUT  0x3A,R30
                 ; 0001 003A }
0000f0 9508      	RET
                 ; .FEND
                 ;
                 ;void lcdInit(void)
                 ; 0001 003D {
                 _lcdInit:
                 ; .FSTART _lcdInit
                 ; 0001 003E     // Alphanumeric LCD initialization
                 ; 0001 003F     // Connections are specified in the
                 ; 0001 0040     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 0041     // RS - PORTC Bit 0
                 ; 0001 0042     // RD - PORTC Bit 1
                 ; 0001 0043     // EN - PORTC Bit 2
                 ; 0001 0044     // D4 - PORTC Bit 4
                 ; 0001 0045     // D5 - PORTC Bit 5
                 ; 0001 0046     // D6 - PORTC Bit 6
                 ; 0001 0047     // D7 - PORTC Bit 7
                 ; 0001 0048     // Characters/line: 16
                 ; 0001 0049     lcd_init(16);
0000f1 e1a0      	LDI  R26,LOW(16)
0000f2 940e 0184 	CALL _lcd_init
                 ; 0001 004A }
0000f4 9508      	RET
                 ; .FEND
                 ;
                 ;void init(void)
                 ; 0001 004D {
                 _init:
                 ; .FSTART _init
                 ; 0001 004E     ioInit();
0000f5 dfd6      	RCALL _ioInit
                 ; 0001 004F     timer0Init();
0000f6 dfde      	RCALL _timer0Init
                 ; 0001 0050     timer2Init();
0000f7 dfe4      	RCALL _timer2Init
                 ; 0001 0051     interruptsInit();
0000f8 dfec      	RCALL _interruptsInit
                 ; 0001 0052     lcdInit();
0000f9 dff7      	RCALL _lcdInit
                 ; 0001 0053 }
0000fa 9508      	RET
                 ; .FEND
                 ;#include <headerFile.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char flag=1;
                 
                 	.DSEG
                 ;char shift = 0x01;
                 ;
                 ;void changeDutyCycle(void)
                 ; 0002 0007 {
                 
                 	.CSEG
                 _changeDutyCycle:
                 ; .FSTART _changeDutyCycle
                 ; 0002 0008     unsigned char in;
                 ; 0002 0009     int ocr;
                 ; 0002 000A     in = PINA;
0000fb 940e 0205 	CALL __SAVELOCR4
                 ;	in -> R17
                 ;	ocr -> R18,R19
0000fd b319      	IN   R17,25
                 ; 0002 000B     ocr = (18*in+265)/20;
0000fe e1a2      	LDI  R26,LOW(18)
0000ff 9f1a      	MUL  R17,R26
000100 01f0      	MOVW R30,R0
000101 5fe7      	SUBI R30,LOW(-265)
000102 4ffe      	SBCI R31,HIGH(-265)
000103 01df      	MOVW R26,R30
000104 e1e4      	LDI  R30,LOW(20)
000105 e0f0      	LDI  R31,HIGH(20)
000106 940e 01f2 	CALL __DIVW21
000108 019f      	MOVW R18,R30
                 ; 0002 000C     OCR0 = ocr;
000109 bf2c      	OUT  0x3C,R18
                 ; 0002 000D }
00010a 940e 020a 	CALL __LOADLOCR4
00010c 9624      	ADIW R28,4
00010d 9508      	RET
                 ; .FEND
                 ;
                 ;void stepperMotorSignal(void)
                 ; 0002 0010 {
                 _stepperMotorSignal:
                 ; .FSTART _stepperMotorSignal
                 ; 0002 0011     PORTB = shift<<4;
00010e 2de7      	MOV  R30,R7
00010f 95e2      	SWAP R30
000110 7fe0      	ANDI R30,0xF0
000111 bbe8      	OUT  0x18,R30
                 ; 0002 0012     if (flag==1)
000112 91a0 019c 	LDS  R26,_flag
000114 30a1      	CPI  R26,LOW(0x1)
000115 f439      	BRNE _0x40004
                 ; 0002 0013     {
                 ; 0002 0014         shift = shift<<1;
000116 0c77      	LSL  R7
                 ; 0002 0015         if (shift==0x10)
000117 e1e0      	LDI  R30,LOW(16)
000118 15e7      	CP   R30,R7
000119 f411      	BRNE _0x40005
                 ; 0002 0016             shift = 0x01;
00011a e0e1      	LDI  R30,LOW(1)
00011b 2e7e      	MOV  R7,R30
                 ; 0002 0017     }
                 _0x40005:
                 ; 0002 0018     else if (flag==2)
00011c c009      	RJMP _0x40006
                 _0x40004:
00011d 91a0 019c 	LDS  R26,_flag
00011f 30a2      	CPI  R26,LOW(0x2)
000120 f429      	BRNE _0x40007
                 ; 0002 0019     {
                 ; 0002 001A         shift = shift>>1;
000121 9476      	LSR  R7
                 ; 0002 001B         if (shift==0x00)
000122 2077      	TST  R7
000123 f411      	BRNE _0x40008
                 ; 0002 001C             shift = 0x08;
000124 e0e8      	LDI  R30,LOW(8)
000125 2e7e      	MOV  R7,R30
                 ; 0002 001D     }
                 _0x40008:
                 ; 0002 001E 
                 ; 0002 001F }
                 _0x40007:
                 _0x40006:
000126 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000127 93aa      	ST   -Y,R26
000128 b3e5      	IN   R30,0x15
000129 70ef      	ANDI R30,LOW(0xF)
00012a 2fae      	MOV  R26,R30
00012b 81e8      	LD   R30,Y
00012c 7fe0      	ANDI R30,LOW(0xF0)
00012d 2bea      	OR   R30,R26
00012e bbe5      	OUT  0x15,R30
                +
00012f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000130 958a     +DEC R24
000131 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000132 9aaa      	SBI  0x15,2
                +
000133 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000134 958a     +DEC R24
000135 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000136 98aa      	CBI  0x15,2
                +
000137 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000138 958a     +DEC R24
000139 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013a c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013b 93aa      	ST   -Y,R26
00013c 81a8      	LD   R26,Y
00013d dfe9      	RCALL __lcd_write_nibble_G100
00013e 81e8          ld    r30,y
00013f 95e2          swap  r30
000140 83e8          st    y,r30
000141 81a8      	LD   R26,Y
000142 dfe4      	RCALL __lcd_write_nibble_G100
                +
000143 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000144 958a     +DEC R24
000145 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000146 c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000147 93aa      	ST   -Y,R26
000148 81e8      	LD   R30,Y
000149 e0f0      	LDI  R31,0
00014a 56e3      	SUBI R30,LOW(-__base_y_G100)
00014b 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00014c 81e0      	LD   R30,Z
00014d 81a9      	LDD  R26,Y+1
00014e 0fae      	ADD  R26,R30
00014f dfeb      	RCALL __lcd_write_data
000150 8069      	LDD  R6,Y+1
000151 8098      	LDD  R9,Y+0
000152 9622      	ADIW R28,2
000153 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000154 e0a2      	LDI  R26,LOW(2)
000155 d06f      	RCALL SUBOPT_0x3
000156 e0ac      	LDI  R26,LOW(12)
000157 dfe3      	RCALL __lcd_write_data
000158 e0a1      	LDI  R26,LOW(1)
000159 d06b      	RCALL SUBOPT_0x3
00015a e0e0      	LDI  R30,LOW(0)
00015b 2e9e      	MOV  R9,R30
00015c 2e6e      	MOV  R6,R30
00015d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00015e 93aa      	ST   -Y,R26
00015f 81a8      	LD   R26,Y
000160 30aa      	CPI  R26,LOW(0xA)
000161 f011      	BREQ _0x2000005
000162 1468      	CP   R6,R8
000163 f048      	BRLO _0x2000004
                 _0x2000005:
000164 e0e0      	LDI  R30,LOW(0)
000165 93ea      	ST   -Y,R30
000166 9493      	INC  R9
000167 2da9      	MOV  R26,R9
000168 dfde      	RCALL _lcd_gotoxy
000169 81a8      	LD   R26,Y
00016a 30aa      	CPI  R26,LOW(0xA)
00016b f409      	BRNE _0x2000007
00016c c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
00016d 9463      	INC  R6
00016e 9aa8      	SBI  0x15,0
00016f 81a8      	LD   R26,Y
000170 dfca      	RCALL __lcd_write_data
000171 98a8      	CBI  0x15,0
000172 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000173 93ba      	ST   -Y,R27
000174 93aa      	ST   -Y,R26
000175 931a      	ST   -Y,R17
                 _0x2000008:
000176 81a9      	LDD  R26,Y+1
000177 81ba      	LDD  R27,Y+1+1
000178 91ed      	LD   R30,X+
000179 83a9      	STD  Y+1,R26
00017a 83ba      	STD  Y+1+1,R27
00017b 2f1e      	MOV  R17,R30
00017c 30e0      	CPI  R30,0
00017d f019      	BREQ _0x200000A
00017e 2fa1      	MOV  R26,R17
00017f dfde      	RCALL _lcd_putchar
000180 cff5      	RJMP _0x2000008
                 _0x200000A:
000181 8118      	LDD  R17,Y+0
000182 9623      	ADIW R28,3
000183 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000184 93aa      	ST   -Y,R26
000185 b3e4      	IN   R30,0x14
000186 6fe0      	ORI  R30,LOW(0xF0)
000187 bbe4      	OUT  0x14,R30
000188 9aa2      	SBI  0x14,2
000189 9aa0      	SBI  0x14,0
00018a 9aa1      	SBI  0x14,1
00018b 98aa      	CBI  0x15,2
00018c 98a8      	CBI  0x15,0
00018d 98a9      	CBI  0x15,1
00018e 8088      	LDD  R8,Y+0
00018f 81e8      	LD   R30,Y
000190 58e0      	SUBI R30,-LOW(128)
                +
000191 93e0 019f+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000193 81e8      	LD   R30,Y
000194 54e0      	SUBI R30,-LOW(192)
                +
000195 93e0 01a0+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000197 e1a4      	LDI  R26,LOW(20)
000198 e0b0      	LDI  R27,0
000199 940e 01d1 	CALL _delay_ms
00019b d02e      	RCALL SUBOPT_0x4
00019c d02d      	RCALL SUBOPT_0x4
00019d d02c      	RCALL SUBOPT_0x4
00019e e2a0      	LDI  R26,LOW(32)
00019f df87      	RCALL __lcd_write_nibble_G100
                +
0001a0 ec88     +LDI R24 , LOW ( 200 )
0001a1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a2 9701     +SBIW R24 , 1
0001a3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a4 e2a8      	LDI  R26,LOW(40)
0001a5 df95      	RCALL __lcd_write_data
0001a6 e0a4      	LDI  R26,LOW(4)
0001a7 df93      	RCALL __lcd_write_data
0001a8 e8a5      	LDI  R26,LOW(133)
0001a9 df91      	RCALL __lcd_write_data
0001aa e0a6      	LDI  R26,LOW(6)
0001ab df8f      	RCALL __lcd_write_data
0001ac dfa7      	RCALL _lcd_clear
                 _0x2020001:
0001ad 9621      	ADIW R28,1
0001ae 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _flag:
00019c           	.BYTE 0x1
                 __base_y_G100:
00019d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
0001af 920a      	ST   -Y,R0
0001b0 921a      	ST   -Y,R1
0001b1 92fa      	ST   -Y,R15
0001b2 936a      	ST   -Y,R22
0001b3 937a      	ST   -Y,R23
0001b4 938a      	ST   -Y,R24
0001b5 939a      	ST   -Y,R25
0001b6 93aa      	ST   -Y,R26
0001b7 93ba      	ST   -Y,R27
0001b8 93ea      	ST   -Y,R30
0001b9 93fa      	ST   -Y,R31
0001ba b7ef      	IN   R30,SREG
0001bb 93ea      	ST   -Y,R30
0001bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0001bd 93e0 019c 	STS  _flag,R30
0001bf cf94      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0001c0 dfb2      	RCALL _lcd_puts
0001c1 eba8      	LDI  R26,LOW(3000)
0001c2 e0bb      	LDI  R27,HIGH(3000)
0001c3 940c 01d1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001c5 df75      	RCALL __lcd_write_data
0001c6 e0a3      	LDI  R26,LOW(3)
0001c7 e0b0      	LDI  R27,0
0001c8 940c 01d1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0001ca e3a0      	LDI  R26,LOW(48)
0001cb df5b      	RCALL __lcd_write_nibble_G100
                +
0001cc ec88     +LDI R24 , LOW ( 200 )
0001cd e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001ce 9701     +SBIW R24 , 1
0001cf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001d0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001d1 9610      	adiw r26,0
0001d2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001d3 ed80     +LDI R24 , LOW ( 0x7D0 )
0001d4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001d5 9701     +SBIW R24 , 1
0001d6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001d7 95a8      	wdr
0001d8 9711      	sbiw r26,1
0001d9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001da 9508      	ret
                 
                 __ANEGW1:
0001db 95f1      	NEG  R31
0001dc 95e1      	NEG  R30
0001dd 40f0      	SBCI R31,0
0001de 9508      	RET
                 
                 __DIVW21U:
0001df 2400      	CLR  R0
0001e0 2411      	CLR  R1
0001e1 e190      	LDI  R25,16
                 __DIVW21U1:
0001e2 0faa      	LSL  R26
0001e3 1fbb      	ROL  R27
0001e4 1c00      	ROL  R0
0001e5 1c11      	ROL  R1
0001e6 1a0e      	SUB  R0,R30
0001e7 0a1f      	SBC  R1,R31
0001e8 f418      	BRCC __DIVW21U2
0001e9 0e0e      	ADD  R0,R30
0001ea 1e1f      	ADC  R1,R31
0001eb c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ec 60a1      	SBR  R26,1
                 __DIVW21U3:
0001ed 959a      	DEC  R25
0001ee f799      	BRNE __DIVW21U1
0001ef 01fd      	MOVW R30,R26
0001f0 01d0      	MOVW R26,R0
0001f1 9508      	RET
                 
                 __DIVW21:
0001f2 d004      	RCALL __CHKSIGNW
0001f3 dfeb      	RCALL __DIVW21U
0001f4 f40e      	BRTC __DIVW211
0001f5 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001f6 9508      	RET
                 
                 __CHKSIGNW:
0001f7 94e8      	CLT
0001f8 fff7      	SBRS R31,7
0001f9 c002      	RJMP __CHKSW1
0001fa dfe0      	RCALL __ANEGW1
0001fb 9468      	SET
                 __CHKSW1:
0001fc ffb7      	SBRS R27,7
0001fd c006      	RJMP __CHKSW2
0001fe 95a0      	COM  R26
0001ff 95b0      	COM  R27
000200 9611      	ADIW R26,1
000201 f800      	BLD  R0,0
000202 9403      	INC  R0
000203 fa00      	BST  R0,0
                 __CHKSW2:
000204 9508      	RET
                 
                 __SAVELOCR4:
000205 933a      	ST   -Y,R19
                 __SAVELOCR3:
000206 932a      	ST   -Y,R18
                 __SAVELOCR2:
000207 931a      	ST   -Y,R17
000208 930a      	ST   -Y,R16
000209 9508      	RET
                 
                 __LOADLOCR4:
00020a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00020b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00020c 8119      	LDD  R17,Y+1
00020d 8108      	LD   R16,Y
00020e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :   7 r2 :   0 r3 :   0 r4 :   1 r5 :   4 r6 :   4 r7 :   7 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   2 r17:   8 r18:   4 r19:   2 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   9 r26:  58 r27:  17 r28:   5 r29:   1 r30: 115 r31:  14 
x  :   4 y  :  61 z  :   8 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   6 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  18 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  17 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   0 cpi   :   5 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   4 jmp   :  24 ld    :  25 ldd   :  10 ldi   :  77 
lds   :   2 lpm   :   7 lsl   :   2 lsr   :   1 mov   :  11 movw  :   8 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  29 pop   :   0 push  :   0 rcall :  31 ret   :  21 
reti  :   1 rjmp  :  14 rol   :   3 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :   2 sts   :   3 sub   :   1 subi  :   4 swap  :   2 
tst   :   1 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00041e    950    104   1054   16384   6.4%
[.dseg] 0x000060 0x0001a1      0     65     65    1024   6.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
